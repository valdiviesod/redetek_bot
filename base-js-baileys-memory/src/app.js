import { createBot, createProvider, createFlow, addKeyword, EVENTS } from '@builderbot/bot'
import { MemoryDB as Database } from '@builderbot/bot'
import { BaileysProvider as Provider } from '@builderbot/provider-baileys'


const PORT = process.env.PORT ?? 3008

const welcomeFlow = addKeyword(EVENTS.WELCOME)
    .addAnswer(`游뗿  Hola, te comunicas con el *Chatbot* autom치tico de Redetek, estoy para brindarte la informaci칩n que necesites.`)
    .addAnswer(['Ten en cuenta que nuestras oficinas operan en *punto f칤sico* de Lunes a S치bado de 08:00 AM a 05:00 PM, al  igual que nuestra *l칤nea telef칩nica*: 3080010  '])
    .addAnswer(`Escribe *planes* para obtener informaci칩n sobre los planes de servicio disponibles para ti.`)
    .addAnswer(`Si necesitas soporte t칠cnico, escribe *soporte* para obtener la l칤nea de soporte t칠cnico.`)


const planesFlow = addKeyword(['Planes','planes'])
    .addAnswer(`Donde te encuentras?`)
    .addAnswer(`Escribe *Bogot치* o *Calarc치* para ver las ubicaciones en las que Redetek tiene cobertura.`)

const bogotaFlow = addKeyword(['Bogot치','Bogota', 'bogota', 'bogot치'])
    .addAnswer(`Estas son las localidades en las que tenemos cobertura para *Bogot치*:`)
    .addAnswer([
        'ACAPULCO', 
        'ALCAZARES', 
        'BELLAVISTA', 
        'BONANZA', 
        'BOYACA', 
        'BOSQUE POPULAR', 
        'CLARITA', 
        'CONSOLACION', 
        'DORADO NORTE', 
        'EL PASEO', 
        'ENCANTO', 
        'ESTRADA', 
        'ESTRADITA', 
        'EUROPA', 
        'GAITAN', 
        'ISABELLA', 
        'JUAN XXIII', 
        'LA AURORA', 
        'LA CABA칌A', 
        'LA LIBERTAD', 
        'LA RELIQUIA', 
        'LAS FERIAS', 
        'LAUREL', 
        'LUJAN', 
        'ONCE DE NOVIEMBRE', 
        'PALO BLANCO', 
        'REAL', 
        'SAN FERNANDO', 
        'SANTA HELENITA', 
        'SANTA MARIA DEL LAGO', 
        'SANTA SOFIA', 
        'SIMON BOLIVAR', 
        'SOLEDAD NORTE', 
        'STA ISABEL', 
        'TABORA', 
        'VILLA LUZ', 
        'FRAGUITA', 
        'BALVANERA', 
        'EDUARDO SANTOS', 
        'FRAGUA', 
        'POLICARPA', 
        'PROGRESO-BOYACA', 
        'RESTREPO', 
        'SAN ANTONIO', 
        'SEVILLA', 
        'VERGEL'
      ])
    .addAnswer(`Si est치s ubicado en *VOTO NACIONAL* o *SOLEDAD NORTE PARWEY*, o si eres *Persona Jur칤dica* estos son los planes disponibles para ti:`)
    .addAnswer([`100 MEGAS por $92.000`,
        '300 MEGAS PLUS BANDA ANCHA por $112.000',
        '500 MEGAS PLUS por $159.000'
    ])
    .addAnswer(`Si eres *Persona Natural*, estos son los planes disponibles para ti:`)
    .addAnswer([`TV e Internet Fibra Optica 200 Megas por $65.000  `,
        'TV e Internet 300 Megas por $75.000',
        'TV e Internet 400 Megas por $85.000',
        'TV e Internet 500 Megas por $95.000'
    ])

const calarcaFlow = addKeyword(['Bogot치','Bogota', 'bogota', 'bogot치'])
    .addAnswer(`Hola`)

const soporteFlow = addKeyword(['Soporte','soporte'])
    .addAnswer(`Para soporte t칠cnico debes comunicarte a la siguiente l칤nea telef칩nica para *Bogot치*: 6013080010 y para *Calarc치*: 6063080012. All칤 tu solicitud ser치 validada en un lapso no mayor a 24 horas h치biles laboradas.`)

const main = async () => {
    const adapterFlow = createFlow([welcomeFlow, planesFlow, soporteFlow, planesFlow, bogotaFlow, calarcaFlow])
    
    const adapterProvider = createProvider(Provider)
    const adapterDB = new Database()

    const { handleCtx, httpServer } = await createBot({
        flow: adapterFlow,
        provider: adapterProvider,
        database: adapterDB,
    })

    adapterProvider.server.post(
        '/v1/messages',
        handleCtx(async (bot, req, res) => {
            const { number, message, urlMedia } = req.body
            await bot.sendMessage(number, message, { media: urlMedia ?? null })
            return res.end('sended')
        })
    )

    adapterProvider.server.post(
        '/v1/register',
        handleCtx(async (bot, req, res) => {
            const { number, name } = req.body
            await bot.dispatch('REGISTER_FLOW', { from: number, name })
            return res.end('trigger')
        })
    )

    adapterProvider.server.post(
        '/v1/samples',
        handleCtx(async (bot, req, res) => {
            const { number, name } = req.body
            await bot.dispatch('SAMPLES', { from: number, name })
            return res.end('trigger')
        })
    )

    adapterProvider.server.post(
        '/v1/blacklist',
        handleCtx(async (bot, req, res) => {
            const { number, intent } = req.body
            if (intent === 'remove') bot.blacklist.remove(number)
            if (intent === 'add') bot.blacklist.add(number)

            res.writeHead(200, { 'Content-Type': 'application/json' })
            return res.end(JSON.stringify({ status: 'ok', number, intent }))
        })
    )

    httpServer(+PORT)
}

main()
